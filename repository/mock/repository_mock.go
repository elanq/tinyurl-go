// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/elanq/tinyurl-go/repository (interfaces: URL)
//
// Generated by this command:
//
//	mockgen -destination=./repository/mock/repository_mock.go github.com/elanq/tinyurl-go/repository URL
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/elanq/tinyurl-go/model"
	gomock "go.uber.org/mock/gomock"
)

// MockURL is a mock of URL interface.
type MockURL struct {
	ctrl     *gomock.Controller
	recorder *MockURLMockRecorder
}

// MockURLMockRecorder is the mock recorder for MockURL.
type MockURLMockRecorder struct {
	mock *MockURL
}

// NewMockURL creates a new mock instance.
func NewMockURL(ctrl *gomock.Controller) *MockURL {
	mock := &MockURL{ctrl: ctrl}
	mock.recorder = &MockURLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURL) EXPECT() *MockURLMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURL) Create(arg0 context.Context, arg1 model.URL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockURLMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURL)(nil).Create), arg0, arg1)
}

// FindByShortUrl mocks base method.
func (m *MockURL) FindByShortUrl(arg0 context.Context, arg1 string) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortUrl", arg0, arg1)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortUrl indicates an expected call of FindByShortUrl.
func (mr *MockURLMockRecorder) FindByShortUrl(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortUrl", reflect.TypeOf((*MockURL)(nil).FindByShortUrl), arg0, arg1)
}

// Update mocks base method.
func (m *MockURL) Update(arg0 context.Context, arg1 model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockURLMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockURL)(nil).Update), arg0, arg1)
}
